import logging
import math
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "8353872360:AAG1dZQbOXDA4fawYDvLVGFSYGWYCLNWDDU" 

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
INPUT_NUM1, INPUT_NUM2, INPUT_NUM3, INPUT_NUM4, INPUT_NUM5 = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    keyboard = [
        [InlineKeyboardButton("–£–±–æ—Ä–∫–∞ —Å –ø–æ–ª–∏–≤–æ–º–æ–µ—á–Ω–æ–π —Ä–µ–π–∫–æ–π", callback_data="option1")],
        [InlineKeyboardButton("–î–≤–∏–∂–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º –±–∞–∫–æ–º", callback_data="option2")],
        [InlineKeyboardButton("–î–≤–∏–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –±–∞–∫–æ–º", callback_data="option3")],
        [InlineKeyboardButton("–°—Ç–æ—è–Ω–∫–∞ –≤ –∞–Ω–≥–∞—Ä–µ", callback_data="option4")],
        [InlineKeyboardButton("–°—Ç–æ—è–Ω–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ", callback_data="option5")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –Ω–∞–∑–æ–≤—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–≥—Ä–µ–µ—Ç—Å—è –∏–ª–∏ –æ—Å—Ç—ã–Ω–µ—Ç –º–æ—Ç–æ—Ä.\n\n"
        "–ß–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?",
        reply_markup=reply_markup
    )

async def handle_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    option = query.data
    
    if option == "option1":
        await query.edit_message_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–±—Ä–∞–ª–∏ –£–±–æ—Ä–∫—É —Å –ø–æ–ª–∏–≤–æ–º–æ–µ—á–Ω–æ–π —Ä–µ–π–∫–æ–π üéâ")
    elif option == "option2":
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –î–≤–∏–∂–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º –±–∞–∫–æ–º üëç")
    elif option == "option3":
        await query.edit_message_text("–í–∞—É! –í—ã –≤—ã–±—Ä–∞–ª–∏ –î–≤–∏–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –±–∞–∫–æ–º! üî•")
    elif option == "option4":
        await query.edit_message_text("–í–∞—Ä–∏–∞–Ω—Ç –°—Ç–æ—è–Ω–∫–∞ –≤ –∞–Ω–≥–∞—Ä–µ - –º—É–¥—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ! üí°")
    elif option == "option5":
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª
        context.user_data.clear()
        context.user_data['current_step'] = INPUT_NUM1
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∞—Å—Ñ–∞–ª—å—Ç–∞ (¬∞C):")

async def handle_number_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —á–∏—Å–µ–ª –¥–ª—è option5"""
    user_data = context.user_data
    current_step = user_data.get('current_step')
    
    if current_step is None:
        return  # –ù–µ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å
    
    try:
        num = float(update.message.text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        if current_step == INPUT_NUM1:
            user_data['num1'] = num
            user_data['current_step'] = INPUT_NUM2
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Ç–µ–Ω–∏ (¬∞C):")
            
        elif current_step == INPUT_NUM2:
            user_data['num2'] = num
            user_data['current_step'] = INPUT_NUM3
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –º–æ—Ç–æ—Ä–∞ (¬∞C):")
            
        elif current_step == INPUT_NUM3:
            user_data['num3'] = num
            user_data['current_step'] = INPUT_NUM4
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∑–∞–¥–Ω–µ–≥–æ –º–æ—Ç–æ—Ä–∞ (¬∞C):")
            
        elif current_step == INPUT_NUM4:
            user_data['num4'] = num
            user_data['current_step'] = INPUT_NUM5
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è —Å—Ç–æ—è–Ω–∫–∏ (–º–∏–Ω):")
            
        elif current_step == INPUT_NUM5:
            user_data['num5'] = num
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É
            Tasphalt = user_data['num1']
            Tshadow = user_data['num2']
            Tfront = user_data['num3']
            Tback = user_data['num4']
            time = user_data['num5']
            T0 = Tasphalt * 0.567 + Tshadow * 0.433

            TFrontFinal = round(T0 + (Tfront - T0) * math.exp(-time/45.7))
            TBackFinal = round(T0 + (Tback - T0) * math.exp(-time/45.7))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = (
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∞—Å—Ñ–∞–ª—å—Ç–∞: {user_data['num1']}¬∞C\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ç–µ–Ω–∏: {user_data['num2']}¬∞C\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –º–æ—Ç–æ—Ä–∞: {user_data['num3']}¬∞C\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–¥–Ω–µ–≥–æ –º–æ—Ç–æ—Ä–∞: {user_data['num4']}¬∞C\n"
                f"–í—Ä–µ–º—è —Å—Ç–æ—è–Ω–∫–∏: {user_data['num5']} –º–∏–Ω\n\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –º–æ—Ç–æ—Ä–∞ –≤ –∫–æ–Ω—Ü–µ —Å—Ç–æ—è–Ω–∫–∏: {TFrontFinal}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–¥–Ω–µ–≥–æ –º–æ—Ç–æ—Ä–∞ –≤ –∫–æ–Ω—Ü–µ —Å—Ç–æ—è–Ω–∫–∏: {TBackFinal}"
            )
            
            await update.message.reply_text(result)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            user_data.clear()
    
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

def main():
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_selection))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_number_input))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    application.run_polling()

if __name__ == "__main__":
    main()